{
    "softwareName": "Nginx",
    "staticPort": 80,
    "schedulerActions": [
        {
            "cronEntry": "0 0/30 * * * ?",
            "commands": "SERVICE_ROOT/exports/nginx -c SERVICE_PREFIX/service.conf -t && SERVICE_ROOT/exports/nginx -c SERVICE_PREFIX/service.conf -s reload"

        }
    ],
    "install": {
        "commands": "sofin get nginx",
        "expectOutput": "All done"
    },
    "start": {
        "commands": "
printf 'Launching Coreginx\n' >> SERVICE_PREFIX/service.log 2>&1
SERVICE_ROOT/exports/nginx -c SERVICE_PREFIX/service.conf >> SERVICE_PREFIX/service.log 2>&1
"
    },
    "stop": {
        "commands": "
SERVICE_ROOT/exports/nginx -c SERVICE_PREFIX/service.conf -s stop >> SERVICE_PREFIX/service.log 2>&1
"
    },
    "validate": {
        "commands": "
test ! -d SERVICE_PREFIX/html && mkdir -p SERVICE_PREFIX/html && echo '<html>Hello I am Nginx and I am not configured yet!</html>' > SERVICE_PREFIX/html/index.html
test ! -f SERVICE_PREFIX/service.conf && printf '
worker_processes 2;
events {
    worker_connections 1024;
}

http {
    include SERVICE_ROOT/conf/mime.types;
    default_type application/octet-stream;
    sendfile on;
    keepalive_timeout 270;
    error_log SERVICE_PREFIX/service.log;
    server {
        listen $(cat SERVICE_PREFIX/.ports/0);
        server_name SERVICE_DOMAIN;
        location / {
            root SERVICE_PREFIX/html;
            index index.html index.htm;
        }
    }
}
' > SERVICE_PREFIX/service.conf

SERVICE_ROOT/exports/nginx -c SERVICE_PREFIX/service.conf -t
",
        "expectOutput": "test is successful"
    },
    "reload": {
        "commands": "
printf 'Reloading Coreginx\n' >> SERVICE_PREFIX/service.log 2>&1
SERVICE_ROOT/exports/nginx -c SERVICE_PREFIX/service.conf -s reload >> SERVICE_PREFIX/service.log 2>&1
"
    },
    "babySitter": {
        "commands": "
SERVICE_ROOT/exports/nginx -c SERVICE_PREFIX/service.conf -t
",
        "expectOutput": "test is successful",
        "expectOutputTimeout": 20
    }
}
