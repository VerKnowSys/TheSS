#!/bin/sh


export APP_DOMAIN="${1}"
readonly DEFAULT_REMOTE="svd"

# defaults:
export DEPLOY_PORT="22"
export SSH_OPTIONS="-o CheckHostIP=no -o StrictHostKeyChecking=no -p ${DEPLOY_PORT}"
export SCP_OPTIONS="-P ${DEPLOY_PORT}"


case "$(uname)" in
    Darwin|FreeBSD)
        CONF_FILE="/etc/sofin.conf.sh"
        if [ -e "${CONF_FILE}" ]; then
            . "${CONF_FILE}"
            validate_env
        else
            echo "FATAL: No configuration file found: ${CONF_FILE} or Sofin not installed that host: ${APP_DOMAIN}"
            exit 1
        fi
        export ZIP_BIN=/usr/bin/zip
        if [ ! -x ${ZIP_BIN} ]; then
            error "No zip binary found!"
        fi
        ;;

    *)
        echo "Simplifying functions for custom workstation system: $(uname)"
        alias note="echo"
        alias warn="echo"
        error () {
            echo "$*"
            exit 1
        }
        export PRINTF_BIN=printf
        export UNZIP_BIN=unzip
        export ZIP_BIN=zip
        export SED_BIN=sed
        export CUT_BIN=cut
        export AWK_BIN=awk
        export TR_BIN=tr
        export RM_BIN=rm
        export GIT_BIN=git
        export SSH_BIN=ssh
        export SCP_BIN=scp
        export TAIL_BIN=tail
        export BASENAME_BIN=basename
        ;;

esac


show_usage () {
    note "Usage:"
    note "  $(${BASENAME_BIN} $0) your-app.your-domain.com [OPTION=VALUE OPTION2=VALUE2]"
    note
    note "Available options:"
    note "  APP_USER          # user name on remote host (default: your-user-name)"
    note "  APP_DEBUG         # set to any value to enable deployer debug log"
    note "  APP_STAGE         # stage of web-app to deploy (default: staging)"
    note "  APP_BRANCH        # git branch name to deploy (default: master)"
    note "  APP_SSL_KEY       # path to SSL key file (default: auto-generate)"
    note "  APP_SSL_CERT      # path to SSL certificate file (default: auto-signed)"
    exit 0
}

if [ "${APP_DOMAIN}" = "" ]; then
    show_usage
fi

# set app specific defaults
export APP_NAME="$(echo "${1}" | ${AWK_BIN} -F '[.]' '{print $1}')"
readonly APP_NAME_LC="${APP_NAME}"
readonly APP_NAME="$(${PRINTF_BIN} "${APP_NAME}" | ${CUT_BIN} -c1 | ${TR_BIN} '[a-z]' '[A-Z]')$(${PRINTF_BIN} "${APP_NAME}" | ${SED_BIN} 's/^[a-zA-Z]//')"
export APP_BRANCH="$(${GIT_BIN} name-rev --name-only HEAD)"
readonly APP_REPOSITORY="$(pwd)"
readonly APP_ZIP="${APP_NAME}.zip"


# override with option arguments
DEPLOY_OPTIONS="$(${PRINTF_BIN} "$*\n" | ${SED_BIN} -e "s/${APP_DOMAIN}//")"
for option in ${DEPLOY_OPTIONS}; do
    case ${option} in
        -help|-h|--help)
            show_usage
            ;;

        *)
            note "Setting option: ${option}"
            eval "${option}"
            ;;
    esac

done


# optional settings
if [ "${APP_DEBUG}" != "" ]; then
    export APP_ADDITIONAL_OPTS=" -d"
fi

if [ "${APP_STAGE}" = "" ]; then
    export APP_STAGE="staging" # default stage
fi

if [ "${APP_USER}" = "" ]; then
    export APP_USER="$USER"
fi

if [ ! -f "${APP_REPOSITORY}/.git/config" ]; then
    error "svddply must be run in git repository"
fi

if [ "${APP_NAME}" = "" ]; then
    error "Missing application name!"
fi


note "Web-App name: ${APP_NAME}, domain: ${APP_DOMAIN}, branch: ${APP_BRANCH}, stage: ${APP_STAGE}, repository: ${APP_REPOSITORY}"
# TODO: support value for CERT/ KEY that will disable ssl for given APP_DOMAIN

first_deploy () {
    cwd="$(pwd)"
    cd ..
    note "Creating bare repository from current directory"
    remote_address="$1"
    # TODO: consider support for directories without git repository in it
    ${GIT_BIN} clone --mirror "${cwd}" ${APP_NAME}.git > /dev/null 2>&1
    ${ZIP_BIN} -m -X -q -0 -r ${APP_ZIP} ${APP_NAME}.git || error "Error creating git repository mirror archive!"
    ${SSH_BIN} ${SSH_OPTIONS} "${APP_USER}@${remote_address}" "mkdir -p ~/Repos/ ; rm -rf ${APP_NAME}.git"
    ${SCP_BIN} ${SCP_OPTIONS} ${APP_ZIP} "${APP_USER}@${remote_address}:Repos/${APP_ZIP}" > /dev/null 2>&1
    ${SSH_BIN} ${SSH_OPTIONS} "${APP_USER}@${remote_address}" "cd ~/Repos/ && unzip -q ${APP_ZIP} && rm ${APP_ZIP}"
    cd "${cwd}"
    ${RM_BIN} -f ../${APP_ZIP}
    note "Done pushing repo to ${DEFAULT_REMOTE} ~/Repos/${APP_NAME}.git remote!"
}

for mirror in $(${DIG_BIN} +short ${APP_DOMAIN} A); do
    root_domain_name="$(${PRINTF_BIN} "${APP_DOMAIN}\n" | ${SED_BIN} -e "s/${APP_NAME_LC}.//")"
    pre_srv_record="$(${DIG_BIN} +short _served-node._tcp.${APP_DOMAIN} SRV)"
    srv_record=""
    if [ "${pre_srv_record}" != "" ]; then
        # check SRV record of app domain first
        note "Record present in entry of domain: ${APP_DOMAIN}"
        srv_record="${pre_srv_record}"
    else
        # if empty - check SRV record of root domain
        note "Checking root entry of domain: ${root_domain_name}"
        srv_record="$(${DIG_BIN} +short _served-node._tcp.${root_domain_name} SRV)"
    fi

    if [ "${srv_record}" != "" ]; then
        srv_port="$(${PRINTF_BIN} "${srv_record}\n" | ${AWK_BIN} '{print $3;}')"
        note "Gathered port: ${srv_port} from SRV record of domain: ${root_domain_name}"
        export DEPLOY_PORT="${srv_port}"
        export SSH_OPTIONS="-o CheckHostIP=no -o StrictHostKeyChecking=no -p ${DEPLOY_PORT}"
        export SCP_OPTIONS="-P ${DEPLOY_PORT}"
    fi

    conn_check=$(${SSH_BIN} ${SSH_OPTIONS} "${APP_USER}@${mirror}" "uname -a" | ${TAIL_BIN} -n 1 2> /dev/null)
    test "$?" = "0" || error "Connection attempt failed: ssh://${APP_USER}@${mirror}"
    note "Deploying to machine: ${conn_check}"

    (test -f "${APP_SSL_CERT}" && note "APP_SSL_CERT file: ${APP_SSL_CERT}" \
test -f "${APP_SSL_KEY}" && note "APP_SSL_KEY file: ${APP_SSL_KEY}") || note "Default self-signed SSL will be created for domain: ${APP_DOMAIN}"

    if [ -f "${APP_SSL_CERT}" ]; then
        if [ -f "${APP_SSL_KEY}" ]; then
            note "Uploading given SSL CERT: ${APP_SSL_CERT} and KEY: ${APP_SSL_KEY}"
            ${SCP_BIN} ${SCP_OPTIONS} "${APP_SSL_CERT}" "${APP_USER}@${mirror}:~/SoftwareData/${APP_NAME}/SSL/${APP_DOMAIN}.crt" > /dev/null 2>&1 || error "Failed copying certificate!"
            ${SCP_BIN} ${SCP_OPTIONS} "${APP_SSL_KEY}" "${APP_USER}@${mirror}:~/SoftwareData/${APP_NAME}/SSL/${APP_DOMAIN}.key" > /dev/null 2>&1 || error "Failed copying key!"
            note "Successfully copied certificate: ${APP_SSL_CERT}, and key: ${APP_SSL_KEY}."
        else
            error "APP_SLL_CERT specified, but APP_SSL_KEY file is missing!"
        fi
    else
        note "Specify APP_SLL_CERT and APP_SSL_KEY to upload your SSL certificate."
    fi

    note "Pushing current repository to remote: ${DEFAULT_REMOTE}"
    ${GIT_BIN} remote rm ${DEFAULT_REMOTE} > /dev/null 2>&1
    ${GIT_BIN} remote add ${DEFAULT_REMOTE} "${APP_USER}@${APP_DOMAIN}:Repos/${APP_NAME}.git" > /dev/null 2>&1
    ${GIT_BIN} push ${DEFAULT_REMOTE} ${APP_BRANCH} > /dev/null 2>&1 && note "Remote repository updated" || first_deploy "${mirror}"

    ${SSH_BIN} ${SSH_OPTIONS} "${APP_USER}@${mirror}" "svddeployer -n ${APP_NAME} -o ${APP_DOMAIN} -s ${APP_STAGE} -b ${APP_BRANCH} ${APP_ADDITIONAL_OPTS}" || error "Deploy failed!"

    note "Registering domain entry: ${APP_DOMAIN} on ServeD node: ${mirror}"
    ${SSH_BIN} ${SSH_OPTIONS} "${APP_USER}@${mirror}" "${PRINTF_BIN} \"${APP_DOMAIN}\n\" > /Public/${APP_NAME}_${APP_USER}.web-app" || error "Web deployment request failed for node: ${mirror}!"
done

note "Deploy complete!"
note "Web application should be soon available at: http://${APP_DOMAIN} and https://${APP_DOMAIN}"
note "ServeD will reload proxy immediately, but your app may require some additional time to set up."
note "Please be patient."
