{
    "softwareName": "Nginx",
    "staticPort": 80,
    "schedulerActions": [
        {
            "cronEntry": "* * * * * ?",
            "commands": "
for i in $(seq 1 11); do
    printf \"\n---$(date +%d%m%Y-%H%M%S)---\n\" >> SERVICE_PREFIX/service.log 2>&1
    printf \"------------reloading-nginx-entries------------\n\" >> SERVICE_PREFIX/service.log 2>&1
    SERVICE_ROOT/exports/nginx -c SERVICE_PREFIX/service.conf -t && SERVICE_ROOT/exports/nginx -c SERVICE_PREFIX/service.conf -s reload >> SERVICE_PREFIX/service.log 2>&1 && printf \"-----Reloaded-Coreginx-proxy-configurations----\n\" >> SERVICE_PREFIX/service.log 2>&1
    sleep 5
done
"

        }
    ],
    "install": {
        "commands": "sofin get nginx",
        "expectOutput": "All done"
    },
    "start": {
        "commands": "
printf 'Launching Coreginx\n' >> SERVICE_PREFIX/service.log 2>&1
SERVICE_ROOT/exports/nginx -c SERVICE_PREFIX/service.conf >> SERVICE_PREFIX/service.log 2>&1
"
    },
    "afterStop": {
        "commands": ""
    },
    "stop": {
        "commands": "
SERVICE_ROOT/exports/nginx -c SERVICE_PREFIX/service.conf -s stop >> SERVICE_PREFIX/service.log 2>&1
"
    },
    "configure": {
        "commands": "
printf \"
<html><center>Site not deployed yet</center></html>
\" > /Public/server_error.html

printf \"
worker_processes 8;
pid SERVICE_PREFIX/service.pid;
error_log SERVICE_PREFIX/service.log;
events {
    worker_connections 1024;
}

http {
    include SERVICE_ROOT/conf/mime.types;
    default_type application/octet-stream;
    sendfile on;
    gzip on;
    gzip_disable \"msie6\";
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 1;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

    keepalive_timeout 270;
    server_names_hash_bucket_size 64;

    fastcgi_buffers 8 16k;
    fastcgi_buffer_size 32k;

    access_log off;

    server {
        listen $(cat SERVICE_PREFIX/.ports/0);
        server_name *.SERVICE_DOMAIN SERVICE_DOMAIN;
        location / {
            root SERVICE_PREFIX/html;
            index index.html index.htm;
            try_files /SERVICE_DOMAIN$uri /default$uri/ @error;
        }

        location @error {
            root /Public;
            index server_error.html;
        }
    }

    include /home/*/SoftwareData/*/proxy.conf;
    include /Users/*/SoftwareData/*/proxy.conf;
}
\" > SERVICE_PREFIX/service.conf
"
    },
    "validate": {
        "commands": "
test ! -d SERVICE_PREFIX/html && mkdir -p SERVICE_PREFIX/html && echo '<html>Hello I am Nginx and I am not configured yet!</html>' > SERVICE_PREFIX/html/index.html
SERVICE_ROOT/exports/nginx -c SERVICE_PREFIX/service.conf -t && SERVICE_ROOT/exports/nginx -c SERVICE_PREFIX/service.conf -s reload
",
        "expectOutput": "test is successful"
    },
    "reload": {
        "commands": "
printf 'Reloading Coreginx\n' >> SERVICE_PREFIX/service.log 2>&1
SERVICE_ROOT/exports/nginx -c SERVICE_PREFIX/service.conf -s reload >> SERVICE_PREFIX/service.log 2>&1
"
    }
}
